<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="kFAo_U,3]HyG,.!=DZ:o">I2C_ADDRESS</variable><variable id="]cO{;=/dxbVobxR?6da1">TEMP_CMD</variable><variable id="UPWf`]7hX;A4T7tr}Pz)">HUMIDITY_CMD</variable><variable id="p},O%SI-eI%x_nKN!e7|">READ_REG</variable></variables><block type="pxt-on-start" id="0EB^AaP~M`JPaA]gP?Ro" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="2)SHkFW~F*B!u/oH09!r" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let humidity_checksum = 0" numlines="1" declaredvars="humidity_checksum"></mutation><next><block type="typescript_statement" id=",9vccacyKU.99EIw4H}/" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let humidity_lsb = 0" numlines="1" declaredvars="humidity_lsb"></mutation><next><block type="typescript_statement" id="=gblbI*?b_V/oNtBh93l" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let humidity_msb = 0" numlines="1" declaredvars="humidity_msb"></mutation><next><block type="typescript_statement" id="YY~eDHBi08Bz#*l5ojF|" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let temp_checksum = 0" numlines="1" declaredvars="temp_checksum"></mutation><next><block type="typescript_statement" id="yCo{=KD6WBK:Y:ACvh|q" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let temp_lsb = 0" numlines="1" declaredvars="temp_lsb"></mutation><next><block type="typescript_statement" id="DqX*(0}{DN)b{ZILq_Qs" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let temp_msb = 0" numlines="1" declaredvars="temp_msb"></mutation><next><block type="variables_set" id="z}^#i!p-_7kFYit_qV:z"><field name="VAR" id="kFAo_U,3]HyG,.!=DZ:o">I2C_ADDRESS</field><value name="VALUE"><shadow type="math_number" id="?z1,:wKVTf7q=J|AFTo1"><field name="NUM">68</field></shadow></value><next><block type="variables_set" id="3FHk=w0M(^|Dmb27Sb38"><field name="VAR" id="]cO{;=/dxbVobxR?6da1">TEMP_CMD</field><value name="VALUE"><shadow type="math_number" id="~Zli~1odmtY!]N(*Ezv_"><field name="NUM">44</field></shadow></value><next><block type="variables_set" id="R6l+hmwU]/TX^Phtthel"><field name="VAR" id="UPWf`]7hX;A4T7tr}Pz)">HUMIDITY_CMD</field><value name="VALUE"><shadow type="math_number" id="qvr_Syg#qHTY2f`%4h|M"><field name="NUM">44</field></shadow></value><next><block type="variables_set" id="6L5ff){T]Q(Bc$V8+%9$"><field name="VAR" id="p},O%SI-eI%x_nKN!e7|">READ_REG</field><value name="VALUE"><shadow type="math_number" id="e7jyLgDwy2/%D~`]j*~u"><field name="NUM">231</field></shadow></value><next><block type="typescript_statement" id="3JYTo#3XDC!txQIHX7sO" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace CipSHT3xDriver {" line1="" line2="    pins.i2cWriteNumber(I2C_ADDRESS, TEMP_CMD, NumberFormat.UInt32BE, false);" line3="    basic.pause(20);" line4="    temp_msb = pins.i2cReadNumber(I2C_ADDRESS, NumberFormat.UInt32BE, true);" line5="    temp_lsb = pins.i2cReadNumber(I2C_ADDRESS, NumberFormat.UInt32BE, true);" line6="    temp_checksum = pins.i2cReadNumber(I2C_ADDRESS, NumberFormat.UInt32BE, true);" line7="" line8="    // Enviar comando para leer la humedad" line9="    pins.i2cWriteNumber(I2C_ADDRESS, HUMIDITY_CMD, NumberFormat.UInt32BE, false);" line10="    basic.pause(20);" line11="    humidity_msb = pins.i2cReadNumber(I2C_ADDRESS, NumberFormat.UInt32BE, true);" line12="    humidity_lsb = pins.i2cReadNumber(I2C_ADDRESS, NumberFormat.UInt32BE, true);" line13="    humidity_checksum = pins.i2cReadNumber(I2C_ADDRESS, NumberFormat.UInt32BE, true);" line14="    /**" line15="     * Read Relative Humidity from the SHT3x Sensor." line16="     * Returns a number describing the relative humidity in percentage % relative" line17="     * humidity" line18="    */" line19="    //% blockId=&quot;SHT3x_read_humidity&quot;" line20="    //% block=&quot;Leer Humedad&quot;" line21="    export function read_humidity(): number {" line22="        let humidity = (((humidity_msb * 256) + humidity_lsb) * 100) / 65535.0;" line23="        return humidity;" line24="    }" line25="    /**" line26="     * Read Temperature in degrees celcius from the SHT3x sensor." line27="     * Returns a number describing the ambient temperature in degrees celsius" line28="    */" line29="    //% blockId=&quot;SHT3xDriver_read_temperature&quot;" line30="    //% block=&quot;Leer Temperatura&quot;" line31="    export function read_temperature(): number {" line32="        let temperature = ((((temp_msb * 256) + temp_lsb) * 175) / 65535.0) - 45;" line33="        return temperature;" line34="    }" line35="" line36="}" numlines="37"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>